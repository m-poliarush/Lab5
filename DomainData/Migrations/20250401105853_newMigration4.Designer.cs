// <auto-generated />
using MenuManager.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MenuManager.Migrations
{
    [DbContext(typeof(MenuContext))]
    [Migration("20250401105853_newMigration4")]
    partial class newMigration4
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.3");

            modelBuilder.Entity("BaseMenuItemDailyMenu", b =>
                {
                    b.Property<int>("DishesID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("menusDayID")
                        .HasColumnType("INTEGER");

                    b.HasKey("DishesID", "menusDayID");

                    b.HasIndex("menusDayID");

                    b.ToTable("BaseMenuItemDailyMenu");
                });

            modelBuilder.Entity("BaseMenuItemOrder", b =>
                {
                    b.Property<int>("dishesID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ordersOrderID")
                        .HasColumnType("INTEGER");

                    b.HasKey("dishesID", "ordersOrderID");

                    b.HasIndex("ordersOrderID");

                    b.ToTable("BaseMenuItemOrder");
                });

            modelBuilder.Entity("ComplexDishDish", b =>
                {
                    b.Property<int>("DishListID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("complexDishesID")
                        .HasColumnType("INTEGER");

                    b.HasKey("DishListID", "complexDishesID");

                    b.HasIndex("complexDishesID");

                    b.ToTable("ComplexDishDish");
                });

            modelBuilder.Entity("MenuManager.DB.Models.BaseMenuItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ItemType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Price")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.ToTable("BaseMenuItem");

                    b.HasDiscriminator<string>("ItemType").HasValue("BaseMenuItem");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("MenuManager.DB.Models.DailyMenu", b =>
                {
                    b.Property<int>("DayID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DayOfWeek")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("DayID");

                    b.ToTable("DailyMenus");
                });

            modelBuilder.Entity("MenuManager.DB.Models.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalCost")
                        .HasColumnType("INTEGER");

                    b.HasKey("OrderID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("MenuManager.DB.Models.ComplexDish", b =>
                {
                    b.HasBaseType("MenuManager.DB.Models.BaseMenuItem");

                    b.HasDiscriminator().HasValue("ComplexDish");
                });

            modelBuilder.Entity("MenuManager.DB.Models.Dish", b =>
                {
                    b.HasBaseType("MenuManager.DB.Models.BaseMenuItem");

                    b.HasDiscriminator().HasValue("Dish");
                });

            modelBuilder.Entity("BaseMenuItemDailyMenu", b =>
                {
                    b.HasOne("MenuManager.DB.Models.BaseMenuItem", null)
                        .WithMany()
                        .HasForeignKey("DishesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MenuManager.DB.Models.DailyMenu", null)
                        .WithMany()
                        .HasForeignKey("menusDayID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BaseMenuItemOrder", b =>
                {
                    b.HasOne("MenuManager.DB.Models.BaseMenuItem", null)
                        .WithMany()
                        .HasForeignKey("dishesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MenuManager.DB.Models.Order", null)
                        .WithMany()
                        .HasForeignKey("ordersOrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ComplexDishDish", b =>
                {
                    b.HasOne("MenuManager.DB.Models.Dish", null)
                        .WithMany()
                        .HasForeignKey("DishListID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MenuManager.DB.Models.ComplexDish", null)
                        .WithMany()
                        .HasForeignKey("complexDishesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
